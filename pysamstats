#!/usr/bin/env python

import sys
from optparse import OptionParser
import errno


from pysam import Samfile
from pysamstats import write_coverage, write_coverage_strand, write_coverage_ext, \
    write_coverage_ext_strand


if __name__ == '__main__':
    
    stats_types = ('coverage', 'coverage_strand', 'coverage_ext', 'coverage_ext_strand')
    usage = 'usage: %prog [options] FILE'
    description = "Calculate statistics per genome position based on pileups from a SAM or BAM file and print them to stdout."
    epilog = """
    Supported statistics types:
    
        * coverage - number of reads aligned to each genome position (total and properly paired)
        * coverage_strand - as coverage, but with forward/reverse counts also
        * coverage_ext - various additional coverage metrics 
        
    Examples:
    
        pysamstats --type coverage example.bam > example.coverage.txt
        pysamstats --type coverage --chromosome Pf3D7_v3_01 --start 100000 --end 200000 example.bam > example.coverage.txt

"""

    OptionParser.format_epilog = lambda self, formatter: self.epilog
    parser = OptionParser(usage=usage, description=description, epilog=epilog)
    parser.add_option('-t', '--type', dest='type', help='type of statistics to print: %s' % ', '.join(stats_types), default='coverage')
    parser.add_option('-c', '--chromosome', dest='chromosome', help='chromosome name', default=None)
    parser.add_option('-s', '--start', dest='start', type='int', help='start position (1-based)', default=None)
    parser.add_option('-e', '--end', dest='end', type='int', help='end position (1-based)', default=None)
    parser.add_option('-z', '--zero-based', dest='zero_based', help='use zero-based coordinates (default is false, i.e., use one-based coords)', action='store_true')
    parser.add_option('-o', '--omit-header', dest='omit_header', help='omit header row from output', action='store_true')
    parser.add_option('-p', '--progress', dest='progress', type='int', help='report progress every N rows', metavar='N', default=None)
    options, args = parser.parse_args()
    
    if len(args) != 1:
        parser.error('missing file operand\n\nTry "pysamstats --help" for more information.')
    
    samfile = Samfile(args[0])
    one_based = not options.zero_based
    write_header = not options.omit_header
    
    try:
    
        if options.type == 'coverage':
            write_coverage(sys.stdout, samfile,
                           write_header=write_header, 
                           chrom=options.chromosome, start=options.start, end=options.end, 
                           one_based=one_based, 
                           progress=options.progress)
            
        elif options.type == 'coverage_strand':
            write_coverage_strand(sys.stdout, samfile, 
                                  write_header=write_header, 
                                  chrom=options.chromosome, start=options.start, end=options.end, 
                                  one_based=one_based,  
                                  progress=options.progress)
            
        elif options.type == 'coverage_ext':
            write_coverage_ext(sys.stdout, samfile, 
                               write_header=write_header, 
                               chrom=options.chromosome, start=options.start, end=options.end, 
                               one_based=one_based,  
                               progress=options.progress)
            
        elif options.type == 'coverage_ext_strand':
            write_coverage_ext_strand(sys.stdout, samfile, 
                                      write_header=write_header, 
                                      chrom=options.chromosome, start=options.start, end=options.end, 
                                      one_based=one_based,  
                                      progress=options.progress)
            
        else:
            parser.error('unsupported statistics type: "%s"\nTry one of %s or "pysamstats --help" for more information.' % (options.type, stats_types))
    
    except IOError as e:
        if e.errno == errno.EPIPE:
            pass # ignore broken pipe
        else:
            raise
